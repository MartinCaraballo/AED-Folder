UT9_PD4

Ejercicio 1:
	
	Algoritmo de shellsort mejores incrementos:

	Fuente: Information Processing letters 34 (1990), 7 May 1990, North-Holland
	https://sedgewick.io/wp-content/themes/sedgewick/papers/1990MoreShell.pdf

	Mark Allen WEISS School of Computer Snence, Florida International University, University park, Miami, FL 33199, USA
	Robert SEDGEWICK Department of Computer Science, Princeton University, Princeton, NJ 08540, USA
	
	Communicated by D. Gries
	Received 19 June 1989

	Incrementos:
	
		- Para ordenar 20.000 elementos solamente son necesarios: {1, 2, 5, 11, 17, 37}
		- {1, 3, 7, 13, 23, 53, ...} tiene un rendimiento 5% mayor que la anterior
		- {1, 4, 9, 17, 23} tiene un rendimiento de aproximadamente 1% más que la anterior.

	Buscando en internet encontré:
	https://en.wikipedia.org/wiki/Shellsort#cite_note-:0-15:
		- La secuencia de incrementos más conocida en términos del número medio de comparaciones realizadas es {1, 4, 10, 23, 57, 132, 301, 701} (Ciura, Marcin (2001). "Best Increments for the Average Case of Shellsort" (PDF). In Freiwalds, Rusins (ed.). Proceedings of the 13th International Symposium on Fundamentals of Computation Theory. London: Springer-Verlag. pp. 106–117. ISBN 978-3-540-42487-1.).
	
	https://academickids.com/encyclopedia/index.php/Shell_sort:
		- También encontré, buscando si se usaban los números de fibonacci para incrementos en el algoritmo, que los números de fibonacci por si
		solos no son muy buenos, pero sus cuadrados dejan un muy buen resultado para el algoritmo, dicha secuencia sería:
			Cuadrados de los números de fibonacci: {1, 4, 9, 25, ...}

Ejercicio 2:

	La función pivote más utilizada, como se mencionó en clase, es la que consiste en tomar el primer elemento del conjunto a ordenar y sumarlo con el último,
	y luego dividir entre 2 el resultado de la suma.

	