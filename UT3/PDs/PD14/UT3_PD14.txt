UT3_PD14

Ejercicio 1:

Lenguaje natural -> Guardamos dos numeros enteros, fin (corresponde al largo del array) y inicio (seria la posicion actual).
                    Si inicio es igual a fin entonces llegamos al final de la cola, y debemos volver a la posicion 0. Si ésta esta
                    ocupada, quiere decir que el buffer esta lleno y no podemos insertar.

Precondiciones  ->  El elemento ingresado debe ser del mismo tipo del arreglo.
                    Si el buffer está lleno no se podrá agregar el nodo.

Postcondiciones ->  En caso de que el atributo primero sea null (buffer vacío) entonces el dato ingresado será el primero y el último.
                    El buffer alterará su estado con el nuevo dato, en caso de que este lleno no lo hará.

PoneEnCola (nuevoElemento):
COM
	Si es vacia entonces
        devolver falso
    Fin Si
    
    fin <- (fin + 1) % cola.largo
    cola[fin] <- nuevoElemento
    tamañoActual <- tamañoActual + 1

fin


Ejercicio 2:

Lenguaje natural -> 




public static void main(String[] args) {
        
        /*
            entero inicio
            entero fin
            entero[] cola
            booleano extraido
            booleano insertado
            colaCircular(tamaño : entero){
                COM
                    cola <- nuevo entero[tamaño]
                    inicio <- 0
                    fin <- inicio
                    extraido <- verdadero
                    insertado <- falso
            }
        
        
            poneEnCola(unElemento : var)
                COM
                    SI !estaLlena()
                       cola[fin] <- unElemento
                       SI fin es igual cola.length-1
                            fin <- 0
                       SINO
                            FIN++
                       FINSI
                       extraido <- falso
                       insertado <- verdadero
                    FINSI
                    devolver "cola llena"
                FIN
        
            quitaDeCola() : var
                COM
                    SI !esVacia
                        extraido <- verdadero
                        insertado <- falso
                        SI INICIO es igual a cola.length-1
                            inicio <- 0
                            devolver cola[cola.length-1]
                        FINSI
                        inicio++
                        devolver cola[inicio-1]
                    FINSI
                    devolver "cola vacia"
                FIN
        
            esVacia() : booleano
                COM
                    SI inicio es igual fin
                        SI !insertado
                            devolver verdadero
                        FINSI
                        devolver falso
                    FINSI
                    devolver falso
                FIN
        
            estaLlena() : booleano
                COM
                    SI inicio es igual fin
                        SI !extraido
                            devolver verdadero
                        FINSI
                            devolver falso
                    FINSI
                    devolver falso
                FIN
        */  
    }
}